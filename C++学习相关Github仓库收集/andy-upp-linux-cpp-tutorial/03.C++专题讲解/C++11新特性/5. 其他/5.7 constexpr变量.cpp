/*我们在定义常量的时候一般使用const来定义，一个常量必须在定义的时候进行初始化，
并且之后不可更改。一个常量必须使用一个常量表达式进行初始化，并且在编译期间就可以
得到常量的值，但是如何确定一个表达式就是常量表达式呢，这个通常是由程序员自己确定的，
例如：
*/


const int a =20;
//20是一个字面值，当然也是一个常量表达式，所以用20来为a赋值是没有问题的
//然而下面的代码也可以通过编译，g++ 5.3.1
int a = 20 ;
const int x =  a;
int b[x]={0};
/*为常量x赋值的是一个变量a，这样做应该是不合理的，但是编译器没有报告任何错误，
当然这种错误是显而易见的，但是在复杂的系统中如何判断一个表达式是否是常量表达式是很困难的，
例如这里的a我们一眼就可以判断其并不是一个常量表达式。为此C++11提供了一个新的关键字constexpr，
使用该关键字定义的常量，由编译器检查为其赋值的表达式是否是常量表达式，例如上面的代码改成：
*/
int a = 20 ;
constexpr int x =  a;

/*
编译器编译的时候就会报错说a并不是常量。显然constexpr关键字将常量表达式的检查转交给编译器处理，
而不是程序员自己，所以使用constexpr定义常量要比const安全。
*/